#A function to plot the DECam FoV outline given a central (RA, Dec)

def get_px_boundaries():
    #Dictionary of CCD corners using px as the unit. Origin will be in SE corner of FoV
    #Order of coordinates is BL, TL, TR, BR
    boundaries = {'1': [(16996,24739), (16996,26787), (21092,26787), (21092,24739)], 
              '2': [(12747,24739), (12747,26787), (16843,26787), (16843,24739)], 
              '3': [(8498,24739), (8498,26787), (12594,26787), (12594,24739)], 
              '4': [(19120.5,22490), (19120.5,24538), (23216.5,24538), (23216.5,22490)], 
              '5': [(14871.5,22490), (14871.5,24538), (18967.5,24538), (18967.5,22490)], 
              '6': [(10622.5,22490), (10622.5,24538), (14718.5,24538), (14718.5,22490)], 
              '7': [(6373.5,22490), (6373.5,24538), (10469.5,24538), (10469.5,22490)], 
              '8': [(21245,20241), (21245,22289), (25341,22289), (25341,20241)], 
              '9': [(16996,20241), (16996,22289), (21092,22289), (21092,20241)], 
              '10': [(12747,20241), (12747,22289), (16843,22289), (16843,20241)], 
              '11': [(8498,20241), (8498,22289), (12594,22289), (12594,20241)], 
              '12': [(4249,20241), (4249,22289), (8345,22289), (8345,20241)], 
              '13': [(23369.5,17992), (23369.5,20040), (27465.5,20040), (27465.5,17992)], 
              '14': [(19120.5,17992), (19120.5,20040), (23216.5,20040), (23216.5,17992)], 
              '15': [(14871.5,17992), (14871.5,20040), (18967.5,20040), (18967.5,17992)], 
              '16': [(10622.5,17992), (10622.5,20040), (14718.5,20040), (14718.5,17992)], 
              '17': [(6373.5,17992), (6373.5,20040), (10469.5,20040), (10469.5,17992)], 
              '18': [(2124.5,17992), (2124.5,20040), (6220.5,20040), (6220.5,17992)], 
              '19': [(23369.5,15743), (23369.5,17791), (27465.5,17791), (27465.5,15743)], 
              '20': [(19120.5,15743), (19120.5,17791), (23216.5,17791), (23216.5,15743)], 
              '21': [(14871.5,15743), (14871.5,17791), (18967.5,17791), (18967.5,15743)],               
              '22': [(10622.5,15743), (10622.5,17791), (14718.5,17791), (14718.5,15743)], 
              '23': [(6373.5,15743), (6373.5,17791), (10469.5,17791), (10469.5,15743)], 
              '24': [(2124.5,15743), (2124.5,17791), (6220.5,17791), (6220.5,15743)], 
              '25': [(25494,13494), (25494,15542), (29590,15542), (29590,13494)], 
              '26': [(21245,13494), (21245,15542), (25341,15542), (25341,13494)], 
              '27': [(16996,13494), (16996,15542), (21092,15542), (21092,13494)], 
              '28': [(12747,13494), (12747,15542), (16843,15542), (16843,13494)], 
              '29': [(8498,13494), (8498,15542), (12594,15542), (12594,13494)], 
              '30': [(4249,13494), (4249,15542), (8345,15542), (8345,13494)], 
              '31': [(0,13494), (0,15542), (4096,15542), (4096,13494)],                       
              '32': [(25494,11245), (25494,13293), (29590,13293), (29590,11245)], 
              '33': [(21245,11245), (21245,13293), (25341,13293), (25341,11245)], 
              '34': [(16996,11245), (16996,13293), (21092,13293), (21092,11245)], 
              '35': [(12747,11245), (12747,13293), (16843,13293), (16843,11245)], 
              '36': [(8498,11245), (8498,13293), (12594,13293), (12594,11245)], 
              '37': [(4249,11245), (4249,13293), (8345,13293), (8345,11245)], 
              '38': [(0,11245), (0,13293), (4096,13293), (4096,11245)], 
              '39': [(23369.5,8996), (23369.5,11044), (27465.5,11044), (27465.5,8996)], 
              '40': [(19120.5,8996), (19120.5,11044), (23216.5,11044), (23216.5,8996)], 
              '41': [(14871.5,8996), (14871.5,11044), (18967.5,11044), (18967.5,8996)], 
              '42': [(10622.5,8996), (10622.5,11044), (14718.5,11044), (14718.5,8996)], 
              '43': [(6373.5,8996), (6373.5,11044), (10469.5,11044), (10469.5,8996)], 
              '44': [(2124.5,8996), (2124.5,11044), (6220.5,11044), (6220.5,8996)], 
              '45': [(23369.5,6747), (23369.5,8795), (27465.5,8795), (27465.5,6747)], 
              '46': [(19120.5,6747), (19120.5,8795), (23216.5,8795), (23216.5,6747)], 
              '47': [(14871.5,6747), (14871.5,8795), (18967.5,8795), (18967.5,6747)], 
              '48': [(10622.5,6747), (10622.5,8795), (14718.5,8795), (14718.5,6747)], 
              '49': [(6373.5,6747), (6373.5,8795), (10469.5,8795), (10469.5,6747)], 
              '50': [(2124.5,6747), (2124.5,8795), (6220.5,8795), (6220.5,6747)], 
              '51': [(21245,4498), (21245,6546), (25341,6546), (25341,4498)], 
              '52': [(16996,4498), (16996,6546), (21092,6546), (21092,4498)], 
              '53': [(12747,4498), (12747,6546), (16843,6546), (16843,4498)], 
              '54': [(8498,4498), (8498,6546), (12594,6546), (12594,4498)], 
              '55': [(4249,4498), (4249,6546), (8345,6546), (8345,4498)], 
              '56': [(19120.5,2249), (19120.5,4297), (23216.5,4297), (23216.5,2249)], 
              '57': [(14871.5,2249), (14871.5,4297), (18967.5,4297), (18967.5,2249)], 
              '58': [(10622.5,2249), (10622.5,4297), (14718.5,4297), (14718.5,2249)], 
              '59': [(6373.5,2249), (6373.5,4297), (10469.5,4297), (10469.5,2249)], 
              '60': [(16996,0), (16996,2048), (21092,2048), (21092,0)], 
              '61': [(12747,0), (12747,2048), (16843,2048), (16843,0)], 
              '62': [(8498,0), (8498,2048), (12594,2048), (12594,0)]}
    
    # complete the square
    for k in boundaries.keys():
        boundaries[k].append(boundaries[k][0])
    
    return boundaries

def px_to_deg(coords):
    return [(x / 13659.647, y / 13659.647) for x, y in coords]

def center(coords, c_fov, c_ra, c_dec):
    return [(x + c_ra - c_fov[0], y + c_dec - c_fov[1]) for (x,y) in coords]

def get_centered_deg_fov(center_ra, center_dec):
    boundaries = get_px_boundaries()
    deg_boundaries = {k: px_to_deg(v) for k, v in boundaries.items()}
    fov_center = (0.5 * (deg_boundaries['28'][0][0] + deg_boundaries['28'][3][0]), deg_boundaries['28'][0][1])
    centered_deg_boundaries = {k: center(v, fov_center, center_ra, center_dec) for k, v in deg_boundaries.items()}
    return centered_deg_boundaries


#Demos

def plot_full_FOV(center_ra, center_dec):
    import matplotlib
    matplotlib.use('agg') # Use this backend for plotting in the background
    import matplotlib.pyplot as plt

    centered_deg_fov = get_centered_deg_fov(center_ra, center_dec)

    plt.figure()
    for k, v in centered_deg_fov.items():
        x = [r[0] for r in v] + [v[0][0]]
        y = [r[1] for r in v] + [v[0][1]]
        plt.plot(x,y, color='black')

    plt.xlabel('RA  (deg)')
    plt.ylabel('Dec (deg)')
    plt.show(block=True)

#plot_full_FOV(78.2, 5.3)

def plot_fov_outline(center_ra, center_dec):
    #import matplotlib.pyplot as plt

    centered_deg_fov = get_centered_deg_fov(center_ra, center_dec)

    exterior_points = [(3,1), (3,2), (2,1), (2,2), (1,1), (1,2), (1,3), (4,2), (4, 3), (8, 2), (8, 3),\
                   (13, 2), (13, 3), (19, 2), (19, 3), (25, 2), (25, 3), (32, 2), (32, 3), (39, 2),\
                   (39, 3), (45, 2), (45, 3), (51, 2), (51, 3), (56, 2), (56, 3), (60, 2), (60, 3),\
                   (60, 0), (61, 3), (61, 0), (62, 3), (62, 0), (62, 1), (59, 0), (59, 1), (55, 0),\
                       (55, 1), (50, 0), (44, 0), (44, 1), (38, 0), (38, 1), (31, 0), (31, 1), (24, 0), (24, 1),\
                       (18, 0), (18, 1), (12, 0), (12, 1), (7, 0), (7, 1), (3, 0), (3, 1)]
    fov_outline = []
    for point in exterior_points:
        fov_outline.append(centered_deg_fov[str(point[0])][point[1]])
    
    x = [k[0] for k in fov_outline] 
    y = [k[1] for k in fov_outline] 

    #plt.figure()
    #plt.plot(x,y, color='black')
    #plt.xlabel('RA  (deg)')
    #plt.ylabel('Dec (deg)')
    #plt.show(block=True)

    return x, y


    
#plot_full_FOV(120.3040, 6.3568)

